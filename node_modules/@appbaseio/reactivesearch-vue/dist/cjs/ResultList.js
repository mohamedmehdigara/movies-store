'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-f8b843f8.js');
var VueTypes = _interopDefault(require('vue-types'));
require('emotion');
require('@appbaseio/vue-emotion');
require('polished');
var vueTypes = require('./vueTypes-7cfc2f98.js');
var _mergeJSXProps = _interopDefault(require('@vue/babel-helper-vue-jsx-merge-props'));
var Title = require('./Title-16042ea0.js');
var ListItem = require('./ListItem-5088bd6a.js');

var ResultListContent = {
  name: 'ResultListContent',
  functional: true,
  render: function render(_, _ref) {
    var props = _ref.props,
      children = _ref.children;
    var h = arguments[0];
    return h("article", _mergeJSXProps([{}, props]), [children]);
  }
};
ResultListContent.install = function (Vue) {
  Vue.component(ResultListContent.name, ResultListContent);
};

var ResultListDescription = {
  name: 'ResultListDescription',
  functional: true,
  render: function render(_, _ref) {
    var props = _ref.props,
      children = _ref.children;
    var h = arguments[0];
    return h("div", _mergeJSXProps([{}, props]), [children]);
  }
};
ResultListDescription.install = function (Vue) {
  Vue.component(ResultListDescription.name, ResultListDescription);
};

var _excluded = ["src", "small"];
var ResultListImage = {
  name: 'ResultListImage',
  props: {
    src: VueTypes.string.isRequired,
    small: VueTypes.bool.def(false)
  },
  render: function render() {
    var h = arguments[0];
    var _this$$props = this.$props,
      src = _this$$props.src,
      small = _this$$props.small,
      props = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_this$$props, _excluded);
    return h(ListItem.Image, _mergeJSXProps([{
      "attrs": {
        "src": src,
        "small": small
      }
    }, props]));
  }
};
ResultListImage.install = function (Vue) {
  Vue.component(ResultListImage.name, ResultListImage);
};

var ResultListTitle = {
  name: 'ResultListTitle',
  render: function render() {
    var h = arguments[0];
    var children = this.$slots["default"];
    return h(Title.Title, _mergeJSXProps([{}, this.$props]), [children]);
  }
};
ResultListTitle.install = function (Vue) {
  Vue.component(ResultListTitle.name, ResultListTitle);
};

var _excluded$1 = ["href", "target"];
var ResultList = {
  name: 'ResultList',
  props: {
    href: vueTypes.types.string,
    target: VueTypes.string.def('_blank')
  },
  components: {
    ResultListContent: ResultListContent,
    ResultListDescription: ResultListDescription,
    ResultListImage: ResultListImage,
    ResultListTitle: ResultListTitle
  },
  data: function data() {
    this.__state = {
      hasImage: false,
      isSmall: false
    };
    return this.__state;
  },
  mounted: function mounted() {
    var children = this.$slots["default"];
    var ImageChild = children.find(function (o) {
      return o.componentOptions && o.componentOptions.tag === ResultListImage.name;
    });
    if (ImageChild && ImageChild.componentOptions && ImageChild.componentOptions.propsData) {
      this.hasImage = true;
      if (ImageChild.componentOptions.propsData.small) {
        this.isSmall = true;
      }
    }
  },
  render: function render() {
    var h = arguments[0];
    var _this$$props = this.$props,
      href = _this$$props.href,
      target = _this$$props.target,
      props = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_this$$props, _excluded$1);
    var hasImage = this.hasImage,
      isSmall = this.isSmall;
    var children = this.$slots["default"];
    return h(ListItem.ListItem, _mergeJSXProps([{
      "attrs": {
        "href": href,
        "image": hasImage,
        "small": isSmall,
        "target": target,
        "rel": target === '_blank' ? 'noopener noreferrer' : null
      }
    }, props]), [children]);
  }
};
ResultList.install = function (Vue) {
  Vue.component(ResultList.name, ResultList);
  Vue.component(ResultListContent.name, ResultListContent);
  Vue.component(ResultListDescription.name, ResultListDescription);
  Vue.component(ResultListImage.name, ResultListImage);
  Vue.component(ResultListTitle.name, ResultListTitle);
};

exports.default = ResultList;
