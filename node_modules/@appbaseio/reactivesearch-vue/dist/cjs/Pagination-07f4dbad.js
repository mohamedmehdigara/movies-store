'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var configureStore = require('@appbaseio/reactivecore');
var configureStore__default = _interopDefault(configureStore);
var VueTypes = _interopDefault(require('vue-types'));
var Button = require('./Button-841fd06d.js');
var vueTypes = require('./vueTypes-7cfc2f98.js');

var getClassName = configureStore.helper.getClassName,
  handleA11yAction = configureStore.helper.handleA11yAction;
function getStartPage(totalPages, currentPage, showEndPage) {
  var midValue = parseInt(totalPages / 2, 10);
  var start = currentPage - (showEndPage ? Math.ceil(midValue / 2) - 1 : midValue);
  return start > 1 ? start : 2;
}
var Pagination = {
  name: 'Pagination',
  functional: true,
  props: {
    currentPage: vueTypes.types.number,
    innerClass: vueTypes.types.style,
    pages: vueTypes.types.number,
    setPage: vueTypes.types.func,
    totalPages: vueTypes.types.number,
    showEndPage: VueTypes.bool,
    prevLabel: vueTypes.types.string,
    nextLabel: vueTypes.types.string
  },
  render: function render(createElement, context) {
    var h = arguments[0];
    var props = context.props;
    var onPrevPage = function onPrevPage() {
      if (props.currentPage) {
        props.setPage(props.currentPage - 1);
      }
    };
    var onNextPage = function onNextPage() {
      if (props.currentPage < props.totalPages - 1) {
        props.setPage(props.currentPage + 1);
      }
    };
    if (!props.totalPages) {
      return null;
    }
    var innerClassName = getClassName(props.innerClass, 'button');
    var primary = props.currentPage === 0;
    var className = innerClassName || primary ? innerClassName + " " + (primary ? 'active' : '') : '';
    var buildPaginationDOM = function buildPaginationDOM(position) {
      var pages = props.pages,
        currentPage = props.currentPage,
        totalPages = props.totalPages,
        setPage = props.setPage,
        showEndPage = props.showEndPage;
      var start = position === 'start' ? getStartPage(pages, currentPage, showEndPage) : Math.max(2, Math.ceil(totalPages - (pages - 1) / 2 + 1));
      var paginationButtons = [];
      var endPage = start;
      if (start <= totalPages) {
        var totalPagesToShow = pages < totalPages ? start + (pages - 1) : totalPages + 1;
        if (showEndPage) {
          totalPagesToShow = position === 'start' ? start + (Math.ceil(pages / 2) - pages % 2) : totalPages + 1;
        }
        if (currentPage > totalPages - pages + 2) {
          start = Math.max(2, totalPages - pages + 2);
          totalPagesToShow = start + pages;
        }
        var _loop = function _loop(i) {
          var activeButton = currentPage === i - 1;
          var classNameBtn = innerClassName || activeButton ? innerClassName + " " + (activeButton ? 'active' : '') : '';
          var pageBtn = h(Button.Button, {
            "class": classNameBtn,
            "attrs": {
              "primary": activeButton,
              "tabIndex": "0",
              "alt": "page-" + i
            },
            "on": {
              "keyPress": function keyPress(event) {
                return handleA11yAction(event, function () {
                  return setPage(i - 1);
                });
              },
              "click": function click() {
                return setPage(i - 1);
              }
            }
          }, [i]);
          if (i <= totalPages + 1) {
            paginationButtons.push(pageBtn);
            if (i === Math.min(totalPages + 1, totalPagesToShow) - 1) {
              endPage = i;
            }
          }
        };
        for (var i = start; i < Math.min(totalPages + 1, totalPagesToShow); i += 1) {
          _loop(i);
        }
      }
      return [paginationButtons, start, endPage];
    };
    var buildIntermediatePaginationDom = function buildIntermediatePaginationDom() {
      var showEndPage = props.showEndPage,
        currentPage = props.currentPage,
        totalPages = props.totalPages,
        pages = props.pages;
      if (!showEndPage) return buildPaginationDOM('start')[0];
      if (currentPage <= totalPages - pages + 2 || totalPages < pages) {
        return buildPaginationDOM('start')[0];
      }
      return null;
    };
    return h("div", {
      "class": Button.pagination + " " + getClassName(props.innerClass, 'pagination')
    }, [h(Button.Button, {
      "class": getClassName(props.innerClass, 'button') || '',
      "attrs": {
        "disabled": props.currentPage === 0,
        "tabIndex": "0"
      },
      "on": {
        "keyPress": function keyPress(event) {
          return handleA11yAction(event, onPrevPage);
        },
        "click": onPrevPage
      }
    }, [props.prevLabel || 'Prev']), h(Button.Button, {
      "class": className,
      "attrs": {
        "primary": primary,
        "tabIndex": "0"
      },
      "on": {
        "keyPress": function keyPress(event) {
          return handleA11yAction(event, function () {
            return props.setPage(0);
          });
        },
        "click": function click() {
          return props.setPage(0);
        }
      }
    }, ["1"]), props.showEndPage && props.currentPage >= Math.floor(props.pages / 2) + !!(props.pages % 2) && buildPaginationDOM('start')[1] !== 2 ? h("span", ["..."]) : null, buildIntermediatePaginationDom(), props.showEndPage && props.pages > 2 && props.currentPage <= props.totalPages - Math.ceil(props.pages * 0.75) && buildPaginationDOM('start')[2] !== buildPaginationDOM('end')[1] - 1 ? h("span", ["..."]) : null, props.showEndPage && props.totalPages >= props.pages && buildPaginationDOM('end')[0], h(Button.Button, {
      "class": getClassName(props.innerClass, 'button') || '',
      "attrs": {
        "disabled": props.currentPage >= props.totalPages - 1,
        "tabIndex": "0"
      },
      "on": {
        "keyPress": function keyPress(event) {
          return handleA11yAction(event, onNextPage);
        },
        "click": onNextPage
      }
    }, [props.nextLabel || 'Next'])]);
  }
};
Pagination.install = function (Vue) {
  Vue.component(Pagination.name, Pagination);
};

exports.Pagination = Pagination;
