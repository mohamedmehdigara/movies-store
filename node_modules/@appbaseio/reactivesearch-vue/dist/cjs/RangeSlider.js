'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var configureStore = require('@appbaseio/reactivecore');
var configureStore__default = _interopDefault(configureStore);
var constants = require('@appbaseio/reactivecore/lib/utils/constants');
var _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-f8b843f8.js');
var VueTypes = _interopDefault(require('vue-types'));
require('@appbaseio/vue-emotion');
var vueTypes = require('./vueTypes-7cfc2f98.js');
require('@appbaseio/reactivecore/lib/utils/transform');
require('redux');
var index = require('./index-de136c17.js');
var ComponentWrapper = require('./ComponentWrapper-94c50228.js');
var PreferencesConsumer = require('./PreferencesConsumer-5e6e84a2.js');
var Title = require('./Title-16042ea0.js');
var Container = require('./Container-e699ea95.js');
var NoSSR = _interopDefault(require('vue-no-ssr'));
var ssr = require('./ssr-f2fc1bf6.js');

var updateQuery = configureStore.Actions.updateQuery,
  setQueryOptions = configureStore.Actions.setQueryOptions,
  setCustomQuery = configureStore.Actions.setCustomQuery;
var checkValueChange = configureStore.helper.checkValueChange,
  getClassName = configureStore.helper.getClassName,
  getOptionsFromQuery = configureStore.helper.getOptionsFromQuery,
  isEqual = configureStore.helper.isEqual;
var RangeSlider = {
  name: 'RangeSlider',
  components: ssr.getComponents(),
  inject: {
    theme: {
      from: 'theme_reactivesearch'
    }
  },
  data: function data() {
    var state = {
      currentValue: this.$props.range ? [this.$props.range.start, this.$props.range.end] : [],
      stats: []
    };
    return state;
  },
  props: {
    beforeValueChange: vueTypes.types.func,
    className: VueTypes.string.def(''),
    range: VueTypes.shape({
      start: VueTypes.integer.def(0),
      end: VueTypes.integer.def(10)
    }),
    rangeLabels: vueTypes.types.rangeLabels,
    componentId: vueTypes.types.stringRequired,
    customQuery: vueTypes.types.func,
    data: vueTypes.types.data,
    dataField: vueTypes.types.stringRequired,
    defaultValue: vueTypes.types.range,
    value: vueTypes.types.range,
    filterLabel: vueTypes.types.string,
    innerClass: vueTypes.types.style,
    react: vueTypes.types.react,
    showFilter: VueTypes.bool.def(true),
    showCheckbox: VueTypes.bool.def(true),
    title: vueTypes.types.title,
    URLParams: VueTypes.bool.def(false),
    sliderOptions: VueTypes.object.def({}),
    nestedField: vueTypes.types.string,
    index: VueTypes.string,
    endpoint: vueTypes.types.endpointConfig
  },
  methods: {
    handleSliderChange: function handleSliderChange(values) {
      var value = this.$props.value;
      if (value === undefined) {
        this.handleChange(values);
      } else {
        this.$emit('change', {
          start: values[0],
          end: values[1]
        });
      }
    },
    handleSlider: function handleSlider() {
      var sliderValues = this.$refs.slider.getValue();
      this.handleSliderChange(sliderValues);
    },
    handleChange: function handleChange(currentValue, props) {
      var _this = this;
      if (props === void 0) {
        props = this.$props;
      }
      var performUpdate = function performUpdate() {
        _this.currentValue = currentValue;
        _this.updateQueryHandler([currentValue[0], currentValue[1]], props);
        _this.$emit('valueChange', {
          start: currentValue[0],
          end: currentValue[1]
        });
        _this.$emit('value-change', {
          start: currentValue[0],
          end: currentValue[1]
        });
      };
      checkValueChange(props.componentId, {
        start: currentValue[0],
        end: currentValue[1]
      }, props.beforeValueChange, performUpdate);
    },
    updateQueryHandler: function updateQueryHandler(value, props) {
      var customQuery = props.customQuery;
      var query = RangeSlider.defaultQuery(value, props);
      if (customQuery) {
        var _ref = customQuery(value, props) || {};
        query = _ref.query;
        var customQueryOptions = getOptionsFromQuery(customQuery(value, props));
        index.updateCustomQuery(this.componentId, this.setCustomQuery, this.$props, this.currentValue);
        this.setQueryOptions(props.componentId, customQueryOptions, false);
      }
      var showFilter = props.showFilter,
        _props$range = props.range,
        start = _props$range.start,
        end = _props$range.end;
      var currentStart = value[0],
        currentEnd = value[1];
      // check if the slider is at its initial position
      var isInitialValue = currentStart === start && currentEnd === end;
      this.updateQuery({
        componentId: props.componentId,
        query: query,
        value: value,
        label: props.filterLabel,
        showFilter: showFilter && !isInitialValue,
        URLParams: props.URLParams,
        componentType: constants.componentTypes.rangeSlider
      });
    }
  },
  watch: {
    defaultValue: function defaultValue(newVal) {
      this.handleChange(RangeSlider.parseValue(newVal, this.$props));
    },
    value: function value(newVal, oldVal) {
      if (!isEqual(newVal, oldVal)) {
        this.handleChange(RangeSlider.parseValue(newVal, this.$props));
      }
    },
    selectedValue: function selectedValue(newVal) {
      if (!isEqual(this.$data.currentValue, newVal)) {
        this.handleChange(RangeSlider.parseValue(newVal, this.$props));
        this.$emit('change', newVal);
      }
    },
    customQuery: function customQuery(newVal, oldVal) {
      if (!index.isQueryIdentical(newVal, oldVal, this.$data.currentValue, this.$props)) {
        this.updateQueryHandler(this.$data.currentValue, this.$props);
      }
    }
  },
  created: function created() {
    if (!this.$props.range) {
      console.error('%crange is not defined. Read more about this at https://opensource.appbase.io/reactive-manual/vue/range-components/rangeslider.html#props', 'font-size: 12.5px;');
    }
    if (!this.enableAppbase && this.$props.index) {
      console.warn('Warning(ReactiveSearch): In order to use the `index` prop, the `enableAppbase` prop must be set to true in `ReactiveBase`.');
    }
    // Set custom query in store
    index.updateCustomQuery(this.componentId, this.setCustomQuery, this.$props, this.currentValue);
  },
  beforeMount: function beforeMount() {
    var _this$$props = this.$props,
      value = _this$$props.value,
      defaultValue = _this$$props.defaultValue;
    var selectedValue = this.selectedValue;
    if (this.$props.range) {
      if (Array.isArray(selectedValue)) {
        this.handleChange(selectedValue);
      } else if (selectedValue) {
        this.handleChange(RangeSlider.parseValue(selectedValue, this.$props));
      } else if (value) {
        this.handleChange(RangeSlider.parseValue(value, this.$props));
      } else if (defaultValue) {
        this.handleChange(RangeSlider.parseValue(defaultValue, this.$props));
      }
    }
  },
  render: function render() {
    var h = arguments[0];
    return h(Container.Container, {
      "class": this.$props.className
    }, [this.$props.title && h(Title.Title, {
      "class": getClassName(this.$props.innerClass, 'title')
    }, [this.$props.title]), this.$props.range ? h(NoSSR, [h(ssr.Slider, {
      "class": getClassName(this.$props.innerClass, 'slider')
    }, [h("vue-slider-component", {
      "ref": "slider",
      "attrs": {
        "value": this.currentValue,
        "min": this.$props.range.start,
        "max": this.$props.range.end,
        "dotSize": 20,
        "height": 4,
        "enable-cross": false,
        "tooltip": "always"
      },
      "on": {
        "drag-end": this.handleSlider
      },
      "props": _rollupPluginBabelHelpers._extends({}, this.$props.sliderOptions)
    }), this.$props.rangeLabels && h("div", {
      "class": "label-container"
    }, [h("label", {
      "class": getClassName(this.$props.innerClass, 'label') || 'range-label-left'
    }, [this.$props.rangeLabels.start]), h("label", {
      "class": getClassName(this.$props.innerClass, 'label') || 'range-label-right'
    }, [this.$props.rangeLabels.end])])])]) : null]);
  }
};
RangeSlider.defaultQuery = function (values, props) {
  var query = null;
  if (Array.isArray(values) && values.length) {
    var _range;
    query = {
      range: (_range = {}, _range[props.dataField] = {
        gte: values[0],
        lte: values[1],
        boost: 2.0
      }, _range)
    };
  }
  if (query && props.nestedField) {
    return {
      query: {
        nested: {
          path: props.nestedField,
          query: query
        }
      }
    };
  }
  return query;
};
RangeSlider.parseValue = function (value, props) {
  if (value) {
    return Array.isArray(value) ? value : [value.start, value.end];
  }
  if (props.range) {
    return [props.range.start, props.range.end];
  }
  return [];
};
var mapStateToProps = function mapStateToProps(state, props) {
  return {
    options: state.aggregations[props.componentId] ? state.aggregations[props.componentId][props.dataField] && state.aggregations[props.componentId][props.dataField].buckets // eslint-disable-line
    : [],
    selectedValue: state.selectedValues[props.componentId] ? state.selectedValues[props.componentId].value : null,
    componentProps: state.props[props.componentId],
    enableAppbase: state.config.enableAppbase
  };
};
var mapDispatchtoProps = {
  updateQuery: updateQuery,
  setQueryOptions: setQueryOptions,
  setCustomQuery: setCustomQuery
};
var RangeConnected = PreferencesConsumer.PreferencesConsumer(ComponentWrapper.ComponentWrapper(index.connect(mapStateToProps, mapDispatchtoProps)(RangeSlider), {
  componentType: constants.componentTypes.rangeSlider
}));
RangeConnected.name = RangeSlider.name;
RangeConnected.defaultQuery = RangeSlider.defaultQuery;
RangeConnected.parseValue = RangeSlider.parseValue;
RangeConnected.hasInternalComponent = RangeSlider.hasInternalComponent;
RangeConnected.install = function (Vue) {
  Vue.component(RangeConnected.name, RangeConnected);
};

// Add componentType for SSR
RangeConnected.componentType = constants.componentTypes.rangeSlider;

exports.RangeConnected = RangeConnected;
exports.default = RangeConnected;
