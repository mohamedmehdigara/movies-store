'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var configureStore = require('@appbaseio/reactivecore');
var configureStore__default = _interopDefault(configureStore);
var _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-f8b843f8.js');

var getAggsOrder = configureStore.helper.getAggsOrder;
var extractQuery = function extractQuery(props) {
  var queryToBeReturned = {};
  if (props.defaultQuery) {
    var evaluateQuery = props.defaultQuery([], props);
    if (evaluateQuery) {
      if (evaluateQuery.query) {
        queryToBeReturned.query = evaluateQuery.query;
      }
      if (evaluateQuery.aggs) {
        queryToBeReturned.aggs = evaluateQuery.aggs;
      }
    }
  }
  return queryToBeReturned;
};
// eslint-disable-next-line import/prefer-default-export
var getAggsQuery = function getAggsQuery(query, props) {
  var _clonedQuery$aggs;
  var clonedQuery = query;
  var dataField = props.dataField,
    size = props.size,
    sortBy = props.sortBy,
    showMissing = props.showMissing,
    missingLabel = props.missingLabel;
  clonedQuery.size = 0;
  clonedQuery.aggs = (_clonedQuery$aggs = {}, _clonedQuery$aggs[dataField] = {
    terms: _rollupPluginBabelHelpers._extends({
      field: dataField,
      size: size,
      order: getAggsOrder(sortBy || 'count')
    }, showMissing ? {
      missing: missingLabel
    } : {})
  }, _clonedQuery$aggs);
  if (props.nestedField) {
    clonedQuery.aggs = {
      reactivesearch_nested: {
        nested: {
          path: props.nestedField
        },
        aggs: clonedQuery.aggs
      }
    };
  }
  return _rollupPluginBabelHelpers._extends({}, clonedQuery, extractQuery(props));
};

exports.getAggsQuery = getAggsQuery;
