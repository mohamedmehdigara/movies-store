'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var constants = require('@appbaseio/reactivecore/lib/utils/constants');
var _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-f8b843f8.js');
var helper = require('@appbaseio/reactivecore/lib/utils/helper');
var transform = require('@appbaseio/reactivecore/lib/utils/transform');
var Appbase = _interopDefault(require('appbase-js'));
var valueReducer = _interopDefault(require('@appbaseio/reactivecore/lib/reducers/valueReducer'));
var queryReducer = _interopDefault(require('@appbaseio/reactivecore/lib/reducers/queryReducer'));
var queryOptionsReducer = _interopDefault(require('@appbaseio/reactivecore/lib/reducers/queryOptionsReducer'));
var compositeAggsReducer = _interopDefault(require('@appbaseio/reactivecore/lib/reducers/compositeAggsReducer'));
var constants$1 = require('@appbaseio/reactivecore/lib/constants');
var dependencyTreeReducer = _interopDefault(require('@appbaseio/reactivecore/lib/reducers/dependencyTreeReducer'));
var fetchGraphQL = _interopDefault(require('@appbaseio/reactivecore/lib/utils/graphQL'));
var utils = require('@appbaseio/reactivecore/lib/actions/utils');

var _excluded = ["aggs", "size"],
  _excluded2 = ["query"],
  _excluded3 = ["query"];
var _componentTypeToDefau;
var X_SEARCH_CLIENT = 'ReactiveSearch Vue';
var componentsWithoutFilters = [constants.componentTypes.numberBox, constants.componentTypes.ratingsFilter];
var resultComponents = [constants.componentTypes.reactiveList, constants.componentTypes.reactiveMap];
var componentTypeToDefaultValue = (_componentTypeToDefau = {}, _componentTypeToDefau[constants.componentTypes.singleList] = '', _componentTypeToDefau[constants.componentTypes.multiList] = [], _componentTypeToDefau[constants.componentTypes.singleDataList] = '', _componentTypeToDefau[constants.componentTypes.singleDropdownList] = '', _componentTypeToDefau[constants.componentTypes.multiDataList] = [], _componentTypeToDefau[constants.componentTypes.multiDropdownList] = [], _componentTypeToDefau[constants.componentTypes.tagCloud] = '', _componentTypeToDefau[constants.componentTypes.toggleButton] = '', _componentTypeToDefau[constants.componentTypes.singleDropdownRange] = '', _componentTypeToDefau[constants.componentTypes.multiDropdownRange] = [], _componentTypeToDefau[constants.componentTypes.singleRange] = '', _componentTypeToDefau[constants.componentTypes.multiRange] = [], _componentTypeToDefau);
function getValue(state, id, defaultValue, componentType) {
  if (state && state[id]) {
    try {
      // parsing for next.js - since it uses extra set of quotes to wrap params
      var parsedValue = JSON.parse(state[id]);
      return {
        value: parsedValue,
        reference: 'URL'
      };
    } catch (error) {
      // using react-dom-server for ssr
      return {
        value: state[id],
        reference: 'URL'
      };
    }
  }
  return {
    value: defaultValue || componentTypeToDefaultValue[componentType] || null,
    reference: 'DEFAULT'
  };
}
function parseValue(value, component) {
  if (component.source && component.source.parseValue) {
    return component.source.parseValue(value, component);
  }
  return value;
}

// Returns query DSL with query property and other options
function getDefaultQuery(component, value) {
  // get custom or default query of sensor components
  var currentValue = parseValue(value, component);
  // get default query of result components
  if (component.defaultQuery) {
    var defaultQuery = component.defaultQuery(currentValue, component);
    return _rollupPluginBabelHelpers._extends({
      query: helper.extractQueryFromCustomQuery(defaultQuery)
    }, helper.getOptionsForCustomQuery(defaultQuery));
  }
  return component.source.defaultQuery ? {
    query: component.source.defaultQuery(currentValue, component)
  } : {};
}
// Only results the query part
function getCustomQuery(component, value) {
  // get custom or default query of sensor components
  var currentValue = parseValue(value, component);
  if (component.customQuery) {
    var customQuery = component.customQuery(currentValue, component);
    return _rollupPluginBabelHelpers._extends({
      query: helper.extractQueryFromCustomQuery(customQuery)
    }, helper.getOptionsForCustomQuery(customQuery));
  }
  return component.source.defaultQuery ? {
    query: component.source.defaultQuery(currentValue, component)
  } : null;
}
function initReactivesearch(componentCollection, searchState, settings) {
  return new Promise(function (resolve, reject) {
    var credentials = settings.url && settings.url.trim() !== '' && !settings.credentials ? null : settings.credentials;
    var enableTelemetry = settings.appbaseConfig && settings.appbaseConfig.enableTelemetry !== undefined ? settings.appbaseConfig.enableTelemetry : true;
    var headers = _rollupPluginBabelHelpers._extends({}, settings.enableAppbase && _rollupPluginBabelHelpers._extends({
      'X-Search-Client': X_SEARCH_CLIENT
    }, enableTelemetry === false && {
      'X-Enable-Telemetry': false
    }), settings.headers, settings.enableAppbase && settings.endpoint && settings.endpoint.headers ? settings.endpoint.headers : {});
    var url = settings.url && settings.url.trim() !== '' ? settings.url : 'https://scalr.api.appbase.io';
    var transformRequest = settings.transformRequest || null;
    if (settings.enableAppbase && settings.endpoint) {
      if (settings.endpoint.url) {
        // eslint-disable-next-line prefer-destructuring
        url = settings.endpoint.url;
      }
      transformRequest = function transformRequest(request) {
        var modifiedRequest = helper.transformRequestUsingEndpoint(request, settings.endpoint);
        if (settings.transformRequest) {
          return settings.transformRequest(modifiedRequest);
        }
        return modifiedRequest;
      };
    }
    var config = {
      url: url,
      app: settings.app,
      credentials: credentials,
      transformRequest: transformRequest,
      type: settings.type ? settings.type : '*',
      transformResponse: settings.transformResponse || null,
      graphQLUrl: settings.graphQLUrl || '',
      headers: headers,
      analyticsConfig: settings.appbaseConfig || null,
      enableAppbase: settings.enableAppbase,
      endpoint: settings.endpoint
    };
    var appbaseRef = Appbase(config);
    if (config.transformRequest) {
      appbaseRef.transformRequest = config.transformRequest;
    }
    if (config.transformResponse) {
      appbaseRef.transformResponse = config.transformResponse;
    }
    var components = [];
    var selectedValues = {};
    var internalValues = {};
    var queryList = {};
    var queryLog = {};
    var queryOptions = {};
    var dependencyTree = {};
    var finalQuery = [];
    var appbaseQuery = {}; // Use object to prevent duplicate query added by react prop
    var orderOfQueries = [];
    var hits = {};
    var aggregations = {};
    var compositeAggregations = {};
    var state = {};
    var customQueries = {};
    var defaultQueries = {};
    var componentProps = {};
    componentCollection.forEach(function (component) {
      var componentType = component.source.componentType;
      components = [].concat(components, [component.componentId]);
      // Set component props
      var compProps = {};
      Object.keys(component).forEach(function (key) {
        if (constants.validProps.includes(key)) {
          compProps[key] = component[key];
        }
      });
      var isInternalComponentPresent = false;
      if (component.source.hasInternalComponent) {
        isInternalComponentPresent = component.source.hasInternalComponent(component);
      }
      var isResultComponent = resultComponents.includes(componentType);
      var internalComponent = component.componentId + "__internal";
      var label = component.filterLabel || component.componentId;
      var _getValue = getValue(searchState, component.componentId, component.value || component.defaultValue, componentType),
        value = _getValue.value,
        reference = _getValue.reference;
      // [1] set selected values
      var showFilter = component.showFilter !== undefined ? component.showFilter : true;
      if (componentsWithoutFilters.includes(componentType)) {
        showFilter = false;
      }
      selectedValues = valueReducer(selectedValues, {
        type: 'SET_VALUE',
        component: component.componentId,
        label: label,
        value: value,
        reference: reference,
        showFilter: showFilter,
        URLParams: component.URLParams || false
      });
      // Set custom and default queries
      if (component.customQuery && typeof component.customQuery === 'function') {
        customQueries[component.componentId] = component.customQuery(value, compProps);
      }
      if (component.defaultQuery && typeof component.defaultQuery === 'function') {
        defaultQueries[component.componentId] = component.defaultQuery(value, compProps);
      }
      var componentQueryOptions = {};
      // [2] set query options - main component query (valid for result components)
      if (component && component.source.generateQueryOptions) {
        componentQueryOptions = _rollupPluginBabelHelpers._extends({}, componentQueryOptions, component.source.generateQueryOptions(component));
      }
      var highlightQuery = {};
      if (component.source.highlightQuery) {
        highlightQuery = component.source.highlightQuery(component);
      }
      if (componentQueryOptions && Object.keys(componentQueryOptions).length || highlightQuery && Object.keys(highlightQuery).length) {
        // eslint-disable-next-line
        var _ref = componentQueryOptions || {},
          aggs = _ref.aggs,
          size = _ref.size,
          otherQueryOptions = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref, _excluded);
        if (aggs && Object.keys(aggs).length) {
          isInternalComponentPresent = true;
          componentQueryOptions = _rollupPluginBabelHelpers._extends({}, componentQueryOptions, {
            aggs: aggs,
            size: typeof size === 'undefined' ? 100 : size
          });
        }

        // sort, highlight, size, from - query should be applied on the main component
        if (otherQueryOptions && Object.keys(otherQueryOptions).length || highlightQuery && Object.keys(highlightQuery).length) {
          if (!otherQueryOptions) otherQueryOptions = {};
          if (!highlightQuery) highlightQuery = {};
          var mainQueryOptions = _rollupPluginBabelHelpers._extends({}, otherQueryOptions, highlightQuery, {
            size: size
          });
          if (isInternalComponentPresent) {
            mainQueryOptions = _rollupPluginBabelHelpers._extends({}, otherQueryOptions, highlightQuery);
          }
          if (isResultComponent) {
            var currentPage = component.currentPage ? component.currentPage - 1 : 0;
            if (selectedValues[component.componentId] && selectedValues[component.componentId].value) {
              currentPage = selectedValues[component.componentId].value - 1 || 0;
            }
            var resultSize = component.size || 10;
            var from = currentPage * resultSize;
            // Update props for RS API
            compProps.from = from;
            mainQueryOptions = _rollupPluginBabelHelpers._extends({}, mainQueryOptions, highlightQuery, {
              size: resultSize,
              from: from
            });
          }
          componentQueryOptions = _rollupPluginBabelHelpers._extends({}, componentQueryOptions, mainQueryOptions);
        }
      }
      // [3] set dependency tree
      if (component.react || isInternalComponentPresent || isResultComponent) {
        var react = component.react;
        if (isInternalComponentPresent || isResultComponent) {
          react = helper.pushToAndClause(react, internalComponent);
        }
        dependencyTree = dependencyTreeReducer(dependencyTree, {
          type: 'WATCH_COMPONENT',
          component: component.componentId,
          react: react
        });
      }
      // [4] set query list
      // Do not set default query for suggestions
      if (isInternalComponentPresent && !transform.isSearchComponent(component.componentType)) {
        var _ref2 = getDefaultQuery(component, value) || {},
          defaultQuery = _ref2.query,
          defaultQueryOptions = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref2, _excluded2);
        queryList = queryReducer(queryList, {
          type: 'SET_QUERY',
          component: internalComponent,
          query: defaultQuery
        });
        queryOptions = queryOptionsReducer(queryOptions, {
          type: 'SET_QUERY_OPTIONS',
          component: internalComponent,
          options: _rollupPluginBabelHelpers._extends({}, componentQueryOptions, defaultQueryOptions)
        });
      }
      var _ref3 = getCustomQuery(component, value) || {},
        query = _ref3.query,
        options = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref3, _excluded3);
      var customQuery = query;
      // set custom query for main component
      queryList = queryReducer(queryList, {
        type: 'SET_QUERY',
        component: component.componentId,
        query: customQuery
      });
      queryOptions = queryOptionsReducer(queryOptions, {
        type: 'SET_QUERY_OPTIONS',
        component: component.componentId,
        options: _rollupPluginBabelHelpers._extends({}, options)
      });
      // Set component type in component props
      compProps.componentType = componentType;
      componentProps[component.componentId] = compProps;
    });
    state = {
      components: components,
      dependencyTree: dependencyTree,
      queryList: queryList,
      queryOptions: queryOptions,
      selectedValues: selectedValues,
      internalValues: internalValues,
      props: componentProps,
      customQueries: customQueries,
      defaultQueries: defaultQueries
    };
    // [5] Generate finalQuery for search
    componentCollection.forEach(function (component) {
      // eslint-disable-next-line
      var _buildQuery = helper.buildQuery(component.componentId, dependencyTree, queryList, queryOptions),
        queryObj = _buildQuery.queryObj,
        options = _buildQuery.options;
      var componentQueryOptions = options;
      var validOptions = ['aggs', 'from', 'sort'];
      // check if query or componentQueryOptions are valid - non-empty
      if (queryObj && !!Object.keys(queryObj).length || componentQueryOptions && Object.keys(componentQueryOptions).some(function (item) {
        return validOptions.includes(item);
      })) {
        var _extends2;
        if (!queryObj || queryObj && !Object.keys(queryObj).length) {
          queryObj = {
            match_all: {}
          };
        }
        orderOfQueries = [].concat(orderOfQueries, [component.componentId]);
        var currentQuery = _rollupPluginBabelHelpers._extends({
          query: _rollupPluginBabelHelpers._extends({}, queryObj)
        }, componentQueryOptions, queryOptions[component.componentId]);
        queryLog = _rollupPluginBabelHelpers._extends({}, queryLog, (_extends2 = {}, _extends2[component.componentId] = currentQuery, _extends2));
        if (settings.enableAppbase) {
          var query = transform.getRSQuery(component.componentId, transform.extractPropsFromState(state, component.componentId, queryOptions && Object.keys(queryOptions[component.componentId]).length ? {
            from: queryOptions[component.componentId].from
          } : null));
          if (query) {
            var _extends3;
            // Apply dependent queries
            appbaseQuery = _rollupPluginBabelHelpers._extends({}, appbaseQuery, (_extends3 = {}, _extends3[component.componentId] = query, _extends3), transform.getDependentQueries(state, component.componentId, orderOfQueries));
          }
        } else {
          var preference = config && config.analyticsConfig && config.analyticsConfig.userId ? config.analyticsConfig.userId + "_" + component : component;
          finalQuery = [].concat(finalQuery, [{
            preference: preference
          }, currentQuery]);
        }
      }
    });
    state.queryLog = queryLog;
    var handleTransformResponse = function handleTransformResponse(res, component) {
      if (config.transformResponse && typeof config.transformResponse === 'function') {
        return config.transformResponse(res, component);
      }
      return new Promise(function (resolveTransformResponse) {
        return resolveTransformResponse(res);
      });
    };
    var handleResponse = function handleResponse(res) {
      var allPromises = orderOfQueries.map(function (component, index) {
        return new Promise(function (responseResolve, responseReject) {
          handleTransformResponse(res.responses[index], component).then(function (response) {
            var _extends5;
            if (response.aggregations) {
              var _extends4;
              aggregations = _rollupPluginBabelHelpers._extends({}, aggregations, (_extends4 = {}, _extends4[component] = response.aggregations, _extends4));
              compositeAggregations = compositeAggsReducer(compositeAggregations, {
                type: constants$1.UPDATE_COMPOSITE_AGGS,
                aggregations: response.aggregations,
                append: false
              });
            }
            hits = _rollupPluginBabelHelpers._extends({}, hits, (_extends5 = {}, _extends5[component] = {
              hits: response.hits.hits,
              total: typeof response.hits.total === 'object' ? response.hits.total.value : response.hits.total,
              time: response.took
            }, _extends5));
            responseResolve();
          })["catch"](function (err) {
            return responseReject(err);
          });
        });
      });
      Promise.all(allPromises).then(function () {
        state = _rollupPluginBabelHelpers._extends({}, state, {
          hits: hits,
          aggregations: aggregations
        });
        resolve(state);
      });
    };
    var handleRSResponse = function handleRSResponse(res) {
      var promotedResults = {};
      var rawData = {};
      var customData = {};
      var settingsResponse = {};
      var allPromises = orderOfQueries.map(function (component) {
        return new Promise(function (responseResolve, responseReject) {
          handleTransformResponse(res[component], component).then(function (response) {
            if (response) {
              var _extends7;
              if (response.promoted) {
                promotedResults[component] = response.promoted.map(function (promoted) {
                  return _rollupPluginBabelHelpers._extends({}, promoted.doc, {
                    _position: promoted.position
                  });
                });
              }
              rawData[component] = response;
              // Update custom data
              if (response.customData) {
                customData[component] = response.customData;
              }

              // Update settings
              if (response.settings) {
                settingsResponse[component] = response.settings;
              }
              if (response.aggregations) {
                var _extends6;
                aggregations = _rollupPluginBabelHelpers._extends({}, aggregations, (_extends6 = {}, _extends6[component] = response.aggregations, _extends6));
              }
              var hitsObj = response.hits ? response.hits : response[component].hits;
              hits = _rollupPluginBabelHelpers._extends({}, hits, (_extends7 = {}, _extends7[component] = {
                hits: hitsObj.hits,
                total: typeof hitsObj.total === 'object' ? hitsObj.total.value : hitsObj.total,
                time: response.took
              }, _extends7));
              responseResolve();
            }
          })["catch"](function (err) {
            return responseReject(err);
          });
        });
      });
      Promise.all(allPromises).then(function () {
        state = _rollupPluginBabelHelpers._extends({}, state, {
          hits: hits,
          aggregations: aggregations,
          compositeAggregations: compositeAggregations,
          promotedResults: promotedResults,
          settings: settingsResponse,
          customData: customData,
          rawData: rawData
        });
        resolve(state);
      });
    };
    if (config.graphQLUrl) {
      var handleTransformRequest = function handleTransformRequest(res) {
        if (config.transformRequest && typeof config.transformRequest === 'function') {
          var transformRequestPromise = config.transformRequest(res);
          return transformRequestPromise instanceof Promise ? transformRequestPromise : Promise.resolve(transformRequestPromise);
        }
        return Promise.resolve(res);
      };
      handleTransformRequest(finalQuery).then(function (requestQuery) {
        fetchGraphQL(config.graphQLUrl, config.url, config.credentials, config.app, requestQuery).then(function (res) {
          handleResponse(res);
        })["catch"](function (err) {
          return reject(err);
        });
      })["catch"](function (err) {
        return reject(err);
      });
    } else if (settings.enableAppbase && Object.keys(appbaseQuery).length) {
      finalQuery = Object.keys(appbaseQuery).map(function (c) {
        return appbaseQuery[c];
      });
      // Call RS API
      var rsAPISettings = {};
      if (config.analyticsConfig) {
        rsAPISettings.recordAnalytics = utils.isPropertyDefined(config.analyticsConfig.recordAnalytics) ? config.analyticsConfig.recordAnalytics : undefined;
        rsAPISettings.userId = utils.isPropertyDefined(config.analyticsConfig.userId) ? config.analyticsConfig.userId : undefined;
        rsAPISettings.enableQueryRules = utils.isPropertyDefined(config.analyticsConfig.enableQueryRules) ? config.analyticsConfig.enableQueryRules : undefined;
        rsAPISettings.customEvents = utils.isPropertyDefined(config.analyticsConfig.customEvents) ? config.analyticsConfig.customEvents : undefined;
      }
      appbaseRef.reactiveSearchv3(finalQuery, rsAPISettings).then(function (res) {
        handleRSResponse(res);
      })["catch"](function (err) {
        return reject(err);
      });
    } else {
      appbaseRef.msearch({
        type: config.type === '*' ? '' : config.type,
        body: finalQuery
      }).then(function (res) {
        handleResponse(res);
      })["catch"](function (err) {
        return reject(err);
      });
    }
  });
}

exports.componentTypeToDefaultValue = componentTypeToDefaultValue;
exports.default = initReactivesearch;
