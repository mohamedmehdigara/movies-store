'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var configureStore = require('@appbaseio/reactivecore');
var configureStore__default = _interopDefault(configureStore);
require('@appbaseio/reactivecore/lib/utils/constants');
var _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-f8b843f8.js');
var VueTypes = _interopDefault(require('vue-types'));
require('emotion');
require('@appbaseio/vue-emotion');
require('polished');
var Button = require('./Button-841fd06d.js');
var vueTypes = require('./vueTypes-7cfc2f98.js');
require('redux');
var index = require('./index-de136c17.js');
var Title = require('./Title-16042ea0.js');
var Container = require('./Container-e699ea95.js');

var setValue = configureStore.Actions.setValue,
  clearValues = configureStore.Actions.clearValues,
  resetValuesToDefault = configureStore.Actions.resetValuesToDefault;
var getClassName = configureStore.helper.getClassName,
  handleA11yAction = configureStore.helper.handleA11yAction;
var SelectedFilters = {
  name: 'SelectedFilters',
  props: {
    className: VueTypes.string.def(''),
    clearAllLabel: VueTypes.string.def('Clear All'),
    innerClass: vueTypes.types.style,
    showClearAll: VueTypes.bool.def(true),
    title: vueTypes.types.title,
    resetToDefault: VueTypes.bool.def(false),
    clearAllBlacklistComponents: VueTypes.array,
    resetToValues: VueTypes.object
  },
  inject: {
    theme: {
      from: 'theme_reactivesearch'
    }
  },
  render: function render() {
    var _this = this;
    var h = arguments[0];
    if (this.$scopedSlots["default"]) {
      return this.$scopedSlots["default"]({
        components: this.components,
        selectedValues: this.selectedValues,
        clearValues: this.clearValues,
        clearValue: this.clearValue,
        setValue: this.setValue,
        resetValuesToDefault: this.resetValuesToDefault
      });
    }
    var filtersToRender = this.renderFilters();
    var hasValues = !!filtersToRender.length;
    return h(Container.Container, {
      "class": Button.filters(this.theme) + " " + (this.$props.className || '')
    }, [this.$props.title && hasValues && h(Title.Title, {
      "class": getClassName(this.$props.innerClass, 'title') || ''
    }, [this.$props.title]), filtersToRender, this.$props.showClearAll && hasValues && filtersToRender.length > 1 ? h(Button.Button, {
      "class": getClassName(this.$props.innerClass, 'button') || '',
      "on": _rollupPluginBabelHelpers._extends({}, {
        click: this.clearValues,
        keypress: function keypress(event) {
          return handleA11yAction(event, function () {
            return _this.clearValues();
          });
        }
      }),
      "attrs": {
        "tabIndex": "0"
      }
    }, [this.$props.clearAllLabel]) : null]);
  },
  methods: {
    remove: function remove(component, value) {
      if (value === void 0) {
        value = null;
      }
      this.setValue(component, null);
      this.$emit('clear', component, value);
    },
    clearValues: function clearValues() {
      var resetToDefault = this.resetToDefault,
        resetToValues = this.resetToValues,
        clearAllBlacklistComponents = this.clearAllBlacklistComponents;
      if (resetToDefault) {
        this.resetValuesToDefault(clearAllBlacklistComponents);
      } else {
        this.clearValuesAction(resetToValues, clearAllBlacklistComponents);
      }
      this.$emit('clear', resetToValues);
    },
    clearValue: function clearValue(componentId) {
      var resetToDefault = this.resetToDefault,
        resetToValues = this.resetToValues;
      if (resetToDefault) {
        this.resetValuesToDefault(this.components.filter(function (component) {
          return component !== componentId;
        }));
      } else {
        this.setValue(componentId, (resetToValues == null ? void 0 : resetToValues[componentId]) || null);
      }
      this.$emit('clear', resetToValues == null ? void 0 : resetToValues[componentId]);
    },
    renderValue: function renderValue(value, isArray) {
      var _this2 = this;
      if (isArray && value.length) {
        var arrayToRender = value.map(function (item) {
          return _this2.renderValue(item);
        });
        return arrayToRender.join(', ');
      }
      if (value && typeof value === 'object') {
        // TODO: support for NestedList
        var label = (typeof value.label === 'string' ? value.label : value.value) || value.key || value.distance || null;
        if (value.location) {
          label = value.location + " - " + label;
        }
        return label;
      }
      return value;
    },
    renderFilterButton: function renderFilterButton(component, keyProp, handleRemove, label) {
      var h = this.$createElement;
      return h(Button.Button, {
        "class": getClassName(this.$props.innerClass, 'button') || '',
        "key": keyProp,
        "on": _rollupPluginBabelHelpers._extends({}, {
          click: handleRemove,
          keypress: function keypress(event) {
            return handleA11yAction(event, handleRemove);
          }
        }),
        "attrs": {
          "tabIndex": "0"
        }
      }, [h("span", [label]), h("span", ["\u2715"])]);
    },
    renderFilters: function renderFilters() {
      var _this3 = this;
      var selectedValues = this.selectedValues;
      var filterComponents = Object.keys(selectedValues).filter(function (id) {
        return _this3.components.includes(id) && selectedValues[id].showFilter;
      });
      return filterComponents.map(function (component, index$1) {
        var _selectedValues$compo = selectedValues[component],
          label = _selectedValues$compo.label,
          value = _selectedValues$compo.value;
        var isArray = Array.isArray(value);

        // default behaviour
        if (label && (isArray && value.length || !isArray && value)) {
          var valueToRender = _this3.renderValue(value, isArray);
          return _this3.renderFilterButton(component, component + "-" + (index$1 + 1), function () {
            return _this3.remove(component, value);
          }, selectedValues[component].label + ": " + index.decodeHtml(valueToRender));
        }
        return null;
      }).filter(Boolean);
    }
  },
  watch: {
    selectedValues: function selectedValues(newVal) {
      this.$emit('change', newVal);
    }
  }
};
var mapStateToProps = function mapStateToProps(state) {
  return {
    components: state.components,
    selectedValues: state.selectedValues
  };
};
var mapDispatchtoProps = {
  clearValuesAction: clearValues,
  setValue: setValue,
  resetValuesToDefault: resetValuesToDefault
};
var RcConnected = index.connect(mapStateToProps, mapDispatchtoProps)(SelectedFilters);
RcConnected.name = SelectedFilters.name;
RcConnected.install = function (Vue) {
  Vue.component(RcConnected.name, RcConnected);
};

exports.default = RcConnected;
