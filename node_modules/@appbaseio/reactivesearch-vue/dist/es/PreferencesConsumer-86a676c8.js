import { a as _extends } from './_rollupPluginBabelHelpers-ded08042.js';
import { b as getCamelCase } from './index-5509c0bc.js';

var deepValue = function deepValue(o, p) {
  return p.split('.').reduce(function (a, v) {
    return a ? a[v] : null;
  }, o);
};
/**
 * PreferencesConsumer reads the preferences from SearchPreferencesContext
 * and set the props from preferences to the component
 *
 */
var PreferencesConsumer = function PreferencesConsumer(component) {
  return {
    name: 'PreferencesConsumer',
    inject: {
      $searchPreferences: {
        "default": null
      }
    },
    render: function render(h) {
      var _this = this;
      var userProps = Object.keys(this.$attrs).reduce(function (result, key) {
        var _extends2;
        return _extends({}, result, (_extends2 = {}, _extends2[getCamelCase(key)] = _this.$attrs[key], _extends2));
      }, {});
      var context = this.$searchPreferences;
      if (!userProps || !userProps.componentId) {
        throw Error('ReactiveSearch: componentId is required');
      }
      var componentId = userProps.componentId;
      var preferencesPath = userProps.preferencesPath;
      var preferences;
      if (context) {
        if (preferencesPath) {
          // read preferences from path
          preferences = deepValue(context, preferencesPath);
        } else {
          preferences = deepValue(context, ['componentSettings', componentId].join('.'));
          // read preferences from componentSettings
        }
      }
      // Retrieve component specific preferences
      var componentProps = userProps;
      if (preferences) {
        if (preferences.rsConfig) {
          componentProps = _extends({}, preferences.rsConfig, componentProps);
        } else {
          componentProps = _extends({}, preferences, componentProps);
        }
        if (preferences.enabled !== undefined && !preferences.enabled) {
          return null;
        }
      }
      // Parse component props
      Object.keys(componentProps).forEach(function (p) {
        if (typeof componentProps[p] === 'string') {
          if (['defaultQuery', 'customQuery', 'setOption'].includes(p)) {
            // eslint-disable-next-line
            componentProps[p] = eval(componentProps[p]);
          }
        }
      });
      return h(component, {
        attrs: componentProps,
        on: this.$listeners,
        scopedSlots: this.$scopedSlots,
        slots: this.$slots
      });
    }
  };
};

export { PreferencesConsumer as P };
