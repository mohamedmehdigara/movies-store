import { helper } from '@appbaseio/reactivecore';
import { componentTypes } from '@appbaseio/reactivecore/lib/utils/constants';
import { _ as _taggedTemplateLiteralLoose, a as _extends } from './_rollupPluginBabelHelpers-ded08042.js';
import VueTypes from 'vue-types';
import { css } from 'emotion';
import styled from '@appbaseio/vue-emotion';
import 'polished';
import { t as types } from './vueTypes-8986b709.js';
import '@appbaseio/reactivecore/lib/utils/transform';
import 'redux';
import { c as connect } from './index-5509c0bc.js';
import { C as ComponentWrapper } from './ComponentWrapper-edaeaceb.js';
import { P as PreferencesConsumer } from './PreferencesConsumer-86a676c8.js';
import './Title-863dfa42.js';
import { F as Flex } from './Flex-7c177a10.js';
import { I as Input } from './Input-c09c0b56.js';
import { C as Container } from './Container-d00219f7.js';
import 'vue-no-ssr';
import './ssr-03607d84.js';
import { RangeConnected as RangeConnected$1 } from './RangeSlider.js';

var _templateObject, _templateObject2;
var alert = function alert(_ref) {
  var theme = _ref.theme;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n\tcolor: ", ";\n"])), theme.colors.alertColor);
};
var Content = styled('div')(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n\t", ";\n\tfont-size: 13px;\n\tmargin: 8px;\n"])), function (props) {
  return props.alert && alert;
});

var getClassName = helper.getClassName,
  isEqual = helper.isEqual;
var RangeInput = {
  name: 'RangeInput',
  components: {
    RangeSlider: RangeConnected$1
  },
  inject: {
    theme: {
      from: 'theme_reactivesearch'
    }
  },
  data: function data() {
    var state = {
      currentValue: {
        start: this.$props.range ? this.$props.range.start : 0,
        end: this.$props.range ? this.$props.range.end : 10
      },
      isStartValid: true,
      isEndValid: true
    };
    return state;
  },
  props: {
    className: {
      types: types.string,
      "default": ''
    },
    defaultValue: types.range,
    validateRange: types.func,
    value: types.range,
    dataField: types.stringRequired,
    innerClass: types.style,
    range: {
      types: types.range,
      "default": function _default() {
        return {
          start: 0,
          end: 10
        };
      }
    },
    rangeLabels: types.rangeLabels,
    stepValue: types.number,
    componentStyle: types.style,
    componentId: types.stringRequired,
    includeNullValues: VueTypes.bool,
    beforeValueChange: types.func,
    customQuery: types.func,
    data: types.data,
    filterLabel: types.string,
    react: types.react,
    showFilter: VueTypes.bool.def(true),
    showCheckbox: VueTypes.bool.def(true),
    title: types.title,
    URLParams: VueTypes.bool.def(false),
    sliderOptions: VueTypes.object.def({}),
    nestedField: types.string,
    endpoint: types.endpointConfig
  },
  methods: {
    shouldUpdate: function shouldUpdate(value) {
      var validateRange = this.$props.validateRange;
      if (validateRange && value) {
        return validateRange([value.start, value.end]);
      }
      if (value) {
        return value.start <= value.end;
      }
      return false;
    },
    isControlled: function isControlled() {
      if (this.$props.value && this.$listeners) {
        return true;
      }
      return false;
    },
    handleChange: function handleChange(value, event) {
      var currentValue = value;
      if (this.shouldUpdate(value) && !isEqual(value, this.currentValue)) {
        switch (event) {
          case 'change':
            if (!value) {
              currentValue = {
                start: this.$props.range ? this.$props.range.start : 0,
                end: this.$props.range ? this.$props.range.end : 10
              };
            }
            this.$data.currentValue = _extends({}, currentValue);
            this.$emit('change', this.$data.currentValue);
            break;
          case 'value-change':
            this.$emit('valueChange', this.$data.currentValue);
            this.$emit('value-change', this.$data.currentValue);
            break;
          default:
            this.$data.currentValue = _extends({}, currentValue);
            break;
        }
      }
    },
    handleOnChange: function handleOnChange(value) {
      this.handleChange(value || this.$props.range, 'change');
    },
    handleValueChange: function handleValueChange(value) {
      this.handleChange(value, 'value-change');
    },
    handleInputChange: function handleInputChange(e) {
      var _e$target = e.target,
        name = _e$target.name,
        value = _e$target.value;
      if (Number.isNaN(value)) {
        if (name === 'start') {
          this.$data.isStartValid = false;
        } else {
          this.$data.isEndValid = false;
        }
      } else if (name === 'start' && !this.$data.isStartValid) {
        this.$data.isStartValid = true;
      } else if (name === 'end' && !this.$data.isEndValid) {
        this.$data.isEndValid = true;
      }
      if (this.$data.isStartValid && this.$data.isEndValid) {
        if (name === 'start') {
          this.handleChange({
            start: Number(value),
            end: this.$data.currentValue.end
          }, 'change');
        } else {
          this.handleChange({
            start: this.$data.currentValue.start,
            end: Number(value)
          }, 'change');
        }
      }
    }
  },
  watch: {
    defaultValue: function defaultValue(newVal, oldVal) {
      if (oldVal.start !== newVal.start || oldVal.end !== newVal.end) {
        this.handleChange(newVal);
      }
    },
    value: function value(newVal, oldVal) {
      if (!isEqual(newVal, oldVal)) {
        if (this.isControlled()) {
          this.handleChange(newVal, 'change');
        }
      }
    }
  },
  created: function created() {
    if (this.$props.defaultValue && this.$props.defaultValue.start && this.$props.defaultValue.end) {
      this.handleChange(this.$props.defaultValue);
    }
    if (this.isControlled()) {
      this.handleChange(this.$props.value, 'change');
    }
  },
  render: function render() {
    var h = arguments[0];
    var _this$$props = this.$props,
      className = _this$$props.className,
      dataField = _this$$props.dataField,
      range = _this$$props.range,
      rangeLabels = _this$$props.rangeLabels,
      componentId = _this$$props.componentId,
      innerClass = _this$$props.innerClass,
      stepValue = _this$$props.stepValue,
      componentStyle = _this$$props.componentStyle,
      themePreset = _this$$props.themePreset,
      includeNullValues = _this$$props.includeNullValues,
      beforeValueChange = _this$$props.beforeValueChange,
      customQuery = _this$$props.customQuery,
      data = _this$$props.data,
      filterLabel = _this$$props.filterLabel,
      react = _this$$props.react,
      showFilter = _this$$props.showFilter,
      showCheckbox = _this$$props.showCheckbox,
      title = _this$$props.title,
      URLParams = _this$$props.URLParams,
      sliderOptions = _this$$props.sliderOptions,
      nestedField = _this$$props.nestedField;
    return h(Container, {
      "style": componentStyle,
      "class": className
    }, [h(RangeConnected$1, {
      "attrs": {
        "componentId": componentId,
        "value": {
          start: this.currentValue.start,
          end: this.currentValue.end
        },
        "range": range,
        "dataField": dataField,
        "rangeLabels": rangeLabels,
        "includeNullValues": includeNullValues,
        "beforeValueChange": beforeValueChange,
        "customQuery": customQuery,
        "data": data,
        "filterLabel": filterLabel,
        "react": react,
        "showFilter": showFilter,
        "showCheckbox": showCheckbox,
        "title": title,
        "uRLParams": URLParams,
        "sliderOptions": sliderOptions,
        "nestedField": nestedField
      },
      "on": {
        "change": this.handleOnChange,
        "value-change": this.handleValueChange
      }
    }), h(Flex, {
      "class": getClassName(innerClass, 'input-container') || ''
    }, [h(Flex, {
      "attrs": {
        "direction": "column",
        "flex": 2
      }
    }, [h(Input, {
      "key": componentId + "-start-value",
      "attrs": {
        "name": "start",
        "type": "number",
        "step": stepValue,
        "themePreset": themePreset,
        "aria-label": componentId + "-start-input",
        "min": this.$props.range ? this.$props.range.start : 0,
        "alert": !this.isStartValid
      },
      "on": {
        "change": this.handleInputChange
      },
      "class": getClassName(innerClass, 'input') || '',
      "domProps": _extends({}, {
        value: this.currentValue.start
      })
    }), !this.isStartValid && h(Content, {
      "attrs": {
        "alert": true
      }
    }, ["Input range is invalid"])]), h(Flex, {
      "attrs": {
        "justifyContent": "center",
        "alignItems": "center",
        "flex": 1
      }
    }, ["-"]), h(Flex, {
      "attrs": {
        "direction": "column",
        "flex": 2
      }
    }, [h(Input, {
      "key": componentId + "-end-value",
      "attrs": {
        "name": "end",
        "type": "number",
        "step": stepValue,
        "themePreset": themePreset,
        "aria-label": componentId + "-end-input",
        "max": this.$props.range ? this.$props.range.end : 10,
        "alert": !this.isEndValid
      },
      "on": {
        "change": this.handleInputChange
      },
      "class": getClassName(innerClass, 'input') || '',
      "domProps": _extends({}, {
        value: this.currentValue.end
      })
    }), !this.isEndValid && h(Content, {
      "attrs": {
        "alert": true
      }
    }, ["Input range is invalid"])])])]);
  }
};
var mapStateToProps = function mapStateToProps(state) {
  return {
    themePreset: state.config.themePreset
  };
};
var RangeConnected = PreferencesConsumer(ComponentWrapper(connect(mapStateToProps, {})(RangeInput), {
  componentType: componentTypes.rangeInput
}));
RangeConnected.name = RangeInput.name;
RangeConnected.install = function (Vue) {
  Vue.component(RangeConnected.name, RangeConnected);
};

// Add componentType for SSR
RangeConnected.componentType = componentTypes.rangeInput;

export default RangeConnected;
export { RangeConnected };
